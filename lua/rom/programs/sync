args = {...}
items = {}

function recDir(path)
  if not fs.exists(path) then
    print("Error: "..path.." No such file or directory")
  end
  table.insert(items, "d:"..path)
  local list = fs.list(path)
  for i,v in ipairs(list) do
    local f = shell.resolve(path.."/"..v)
    if fs.isDir(f) then
      recDir(f)
    else
      table.insert(items, "f:"..f)
    end
  end
end

function serv()
  for i,v in ipairs(args) do
    if i ~= 1 then
      recDir(v)
    end
  end
  table.sort(items)

  while true do
    p = recvSync()
    if p.data["type"] == 0 then
      print("Request from: "..p.header.source)
      sendSync(p.header.source, 1) --may do something such as deny requests, etc
      for i,v in ipairs(items) do
        local fn = string.sub(v, 3)
        if string.match(v, "^d") then
	  sendDir(p.header.source, fn)
	elseif string.match(v, "^f") then
          sendFile(p.header.source, fn)
	end
      end
      sendSync(p.header.source, 15)
    end
  end
end

function sendDir(dest, name)
  sendSync(dest, 3, name)
  local p = recvSync()
  while dest ~= p.header.source or p.data["type"] ~= 4 do
    p = recvSync() --wait for ack
  end
end

function sendFile(dest, name)
  local file = fs.open(name, "r")
  local data = file.readAll()
  file.close()

  sendSync(dest, 2, name..string.char(0)..data)
  local p = recvSync()
  while dest ~= p.header.source or p.data["type"] ~= 4 do
    p = recvSync()
  end
end

function receive(src)
  local p = recvSync()
  sendSync(src, 4)
  if p.data["type"] == 15 then --EOT
    return true
  elseif p.data["type"] == 2 then --file
    local file = fs.open(p.data.name, "w")
    file.write(p.data.data)
    file.close()
  elseif p.data["type"] == 3 then --directory
    fs.makeDir(p.data.data)
  end
  return false
end

function capture()
  while true do
    local p = packet.capture(2500)
    local file = fs.open("packet.dump", "a")
    file.write(p.header.source.." -> "..p.header.destination)
    file.write("\tT: "..p.header["type"].." D: "..p.data)
    file.write("\n")
    file.close()
  end
end

function client()
  sendSync(0, 0)
  local t = false
  while not t do
    t = receive(0)
  end
end

function cSyncHeader(typ, data)
  --convert sync header table to string
  --header length, type, data
  local result = ""
  result = result .. string.char(typ) .. data
  return result
end

function dSyncHeader(data)
  --deconvert sync header string to table
  local result = {}
  result["type"] = string.byte(data, 1)
  if result["type"] == 2 then
    local it = string.find(data, string.char(0))
    result["name"] = string.sub(data, 2, it)
    result["data"] = string.sub(data, it+1)
  else
    result["data"] = string.sub(data, 2)
  end
  return result
end

function sendSync(dest, typ, data)
  data = data or ""
  packet.send(dest, 32, cSyncHeader(typ, data), 2500)
end

function recvSync()
  local p = packet.receive(2500)
  p.data = dSyncHeader(p.data)
  return p
end

--0 EOT
--1 request
--2 sendFile
--3 sendDir
--4 ready

--0 Req
--1 Resp
--2 file
--3 directory
--4 ack
--15 EOT

function main()
  if args[1] == "send" then
    serv()
  elseif args[1] == "get" then
    client()
  elseif args[1] == "capture" then
    capture()
  end
end

main()
